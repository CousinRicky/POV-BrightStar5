             PREPARING THE DATA FILES FOR THE BRIGHTSTAR5 LIBRARY
             ----------------------------------------------------
                        Version 1.2-rc.1  2025-Oct-05

This document is intended for those who wish to develop or modify the
BrightStar5 library in compliance with the GNU-LGPL.  If you do not need to
make changes to this library, then you may disregard this document.

Although the files brightstar5_data.inc and brightstar5_index.inc are them-
selves source code, they were generated by automated processes, and editing
them by hand would be tedious to impossible.  Therefore, in the spirit of
the GNU licenses, I am publishing the source files of the utilities used to
generate these two files.

For security reasons, and to avoid clutter in your Object Collection folder,
the source files are contained within this text file.  They should be copied
from this file and saved to individual files in a separate development staging
folder.  They should *not* be stored in your main Object Collection folder
with other downloads!  (As this text file conforms to the Object Collection
naming standards, it does not need to be moved.)


                                  THE FILES
                                  ---------

The embedded files are:
  bsc5-extract.c
  bsc5-header.txt
  bsc5-footer.txt
  make_bsc5_index.pov
  make_bsc5_index.txt

Files bsc5-header.txt and make_bsc5_index.txt will change with every upgrade
of BrightStar5.  Files bsc5-footer.txt and make_bsc5_index.pov will seldom
change, if ever.  File bsc5-extract.c will change (and require re-compiling)
only if there is a change in the selection of which data fields are extracted.


bsc5-extract.c

---%<-----%<-----%<-----%<-----%<-----%<-----%<-----%<-----%<-----%<-----%<---
/* bsc5-extract.c
 * Extracts selected data from Yale Bright Star Catalogue, 5th ed. and converts
 * them to POV-Ray format.
 *
 * Although this utility is part of the BrightStar5 development suite, it is
 * NOT part of the Object Collection proper.  This file should NOT be stored in
 * your Object Collection folder.  See brightstar5_prep.txt for usage.
 *
 * Copyright Â© 2015 - 2021 Richard Callwood III.  Some rights reserved.
 *
 * This library is free software: you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as published
 * by the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  Please
 * visit https://www.gnu.org/licenses/lgpl-3.0.html for the text
 * of the GNU Lesser General Public License version 3.
 *
 * 2015-Nov-16  Conversion from bsc4_extract.c is begun.
 * 2015-Nov-19  String fields are separated from numeric fields.
 * 2015-Nov-22  Fields are extracted for the initial version of BrightStar5.
 * 2015-Nov-29  A very serious typo is corrected in the B-V extraction.
 * 2017-Jan-03  The declaration of the public "no data" constant is moved to an
 *              external file.
 * 2017-Jan-03  Greek letter names are changed to initial caps.
 * 2017-Feb-03  The private "no data" constant is changed to #local.
 * 2017-Oct-19  An extra stand-alone year is added to the header string.
 * 2017-Oct-19  The version is updated to 1.1.
 * 2019-Mar-25  The version is updated to 1.1.1.
 * 2021-Jul-20  The buffer size is increased for the header.
 * 2021-Jul-20  The version is stored at the top of the header file.
 * 2024-Dec-14  The LGPL license is added to this C file.
 */
/*
gcc -o bsc5-extract -lm bsc5-extract.c
./bsc5-extract >brightstar5_data.inc
*/
#include <stdio.h>
#include <errno.h>
#include <stdlib.h>
#include <ctype.h>
#include <string.h>
#include <time.h>

#define INPUT_FILE_NAME  "bsc5.dat"
#define HEADER_FILE_NAME "bsc5-header.txt"
#define FOOTER_FILE_NAME "bsc5-footer.txt"
#define MAX 200 /* each record is 197 chars (plus eol) */
#define VERSION_MAX 21
#define HDR_MAX 4096
#define APP_NAME "bsc5-extract"

#define NO_DATA "BSC5"
#define NNFIELDS 13
static char *nIndices[NNFIELDS][2] =
{  { "HR", "Harvard Revised number" },
   { "FLAMSTEED", "Flamsteed number" },
   { "SUPER", "Bayer superscript" },
   { "HD", "Henry Draper number" },
   { "SAO", "SAO number" },
   { "RA", "J2000 right ascension, in hours" },
   { "DEC", "J2000 declination, in degrees" },
   { "MAG", "visual magnitude" },
   { "COLORBV", "B-V color" },
   { "PROPERRA", "proper motion in right ascension, in arcsec/yr" },
   { "PROPERDEC", "proper motion in declination, in arcsec/yr" },
   { "PARALLAX", "parallax" },
   { "RADIALV", "heliocentric radial velocity, in km/s" },
};

#define NSFIELDS 3
static char *sIndices[NSFIELDS][2] =
{  { "BAYER", "Bayer Greek letter" },
   { "CONST", "constellation abbreviation" },
   { "COMP", "multiple star component(s)" },
};

#define NGR 24
static char *Greeks[NGR] =
{  "Alpha", "Beta", "Gamma", "Delta", "Epsilon", "Zeta", "Eta", "Theta",
   "Iota", "Kappa", "Lambda", "Mu", "Nu", "Xi", "Omicron", "Pi",
   "Rho", "Sigma", "Tau", "Upsilon", "Phi", "Chi", "Psi", "Omega"
};

void Die (const char *msg)
{
   perror (msg);
   exit (errno);
}

char *Greek_match (const char *Abbr)
{
   char *match = "";
   int i;

   if (strlen (Abbr))
      for (i = 0; i < NGR; i++)
         if (!strncmp (Abbr, Greeks[i], strlen (Abbr)))
            match = Greeks[i];
   return match;
}

/* For consistency with Wayne Warren's documentation, start is 1-based. */
void Transfer_int (const char *line, int start, int length)
{
   char s_value[30];
   int i_value;

   s_value[0] = '\0';
   strncat (s_value, line + start - 1, length);
   if (1 == sscanf (s_value, "%d", &i_value))
      printf ("%d", i_value);
   else
      printf (NO_DATA);
   printf (", ");
}

/* For consistency with Wayne Warren's documentation, start is 1-based. */
void Transfer_float (const char *line, int start, int length, int dec)
{
   char s_value[30];
   double f_value;

   s_value[0] = '\0';
   strncat (s_value, line + start - 1, length);
   if (1 == sscanf (s_value, "%lf", &f_value))
      printf ("%0.*f", dec, f_value);
   else
      printf (NO_DATA);
   printf (", ");
}

/* For consistency with Wayne Warren's documentation, start is 1-based. */
char *Extract_string (const char *line, char *cp, int start, int length)
{
   char *end;

   *cp = '\0';
   strncat (cp, line + start - 1, length);
  /* Trim end */
   for (end = cp + length - 1; ' ' == *end && end >= cp; end--)
      ;
   *(end + 1) = '\0';

   return cp;
}

int main (void)
{
   FILE *fin;
   time_t time_t_datestamp;
   struct tm * tm_datestamp;
   char s_datestamp[12], s_yearstamp[5];
   char line[MAX];
   char s_version[VERSION_MAX], s_version_no[VERSION_MAX], *vptr, *vnptr;
   int npoints = 0;
   char s_header[HDR_MAX];
   int nlines = 0, i, c, is_valid;
   char first_char;
   char s_value[30];
   int i_unit, i_min, i_sec, code;
   double f_sec;
   int ch, cix;

/*===== HEADER =====*/
   time (&time_t_datestamp);
   tm_datestamp = localtime (&time_t_datestamp);
   strftime (s_datestamp, 12, "%Y-%b-%d", tm_datestamp);
   strftime (s_yearstamp, 5, "%Y", tm_datestamp);
   fin = fopen (HEADER_FILE_NAME, "r");
   if (!fin) Die (APP_NAME ": Could not open " HEADER_FILE_NAME);
  /* Read the version */
   if (!fgets (s_version, VERSION_MAX, fin) || errno)
      Die (APP_NAME ": Could not read first line of " HEADER_FILE_NAME);
   /* Convert it to a numeral */
   for (vptr = s_version, vnptr = s_version_no; *vptr >= ' '; vptr++)
   {  if ('.' == *vptr)
         npoints++;
      if (*vptr >= '0' && *vptr <= '9' || '.' == *vptr && npoints <= 1)
         *vnptr++ = *vptr;
   }
   *vnptr = '\0';
   if ('\n' == *vptr)
      *vptr = '\0'; /* kill the terminating newline */
  /* Read the header proper */
   for
   (  cix = 0;
      cix < HDR_MAX && (ch = fgetc (fin)) != EOF && !errno;
      cix++
   )
      s_header[cix] = ch;
   if (errno) Die (APP_NAME);
   if (cix >= HDR_MAX)
   {  errno = 1;
      Die (APP_NAME ": Not enough space is allocated for " HEADER_FILE_NAME);
   }
   else
      s_header[cix] = '\0';
   fclose (fin);
   printf
   ( s_header, s_version, s_datestamp, s_yearstamp, s_version, s_version_no
   );

/*===== PASS 1 =====*/
   fin = fopen (INPUT_FILE_NAME, "r");
   if (!fin) Die (APP_NAME " pass 1: Could not open " INPUT_FILE_NAME);
   while (fgets (line, MAX, fin) && !errno)
      nlines++;
   if (errno) Die (APP_NAME);
   printf ("#declare BSC5_N = %d;\n", nlines);

/*===== PASS 2 =====*/
   printf
   ( "\n#local " NO_DATA
     " = -9999; // a \"no data\" flag (shortened to save storage)\n"
   );
   for (i = 0; i < NNFIELDS; i++)
      printf
      (  "#declare BSC5_%s = %d; // %s\n", nIndices[i][0], i, nIndices[i][1]
      );
   rewind (fin);
   if (!fin) Die (APP_NAME " pass 2: Could not rewind " INPUT_FILE_NAME);
   printf ("#declare BSC5_Data = array[BSC5_N][%d]\n", NNFIELDS);
/* Numeric data fields:
 *   1-  4  I4    Harvard Revised number = Bright Star number
 *   5-  7  I3    Flamsteed number
 *      11  I1    Bayer superscript
 *  26- 31  I6    Henry Draper Catalog number
 *  32- 37  I6    SAO Catalog number
 *  76- 77  I2    RA hours, equinox J2000, epoch 2000.0
 *  78- 79  I2    RA minutes, equinox J2000, epoch 2000.0
 *  80- 83  F4.1  RA seconds, equinox J2000, epoch 2000.0
 *      84  A1    Dec sign, equinox J2000, epoch 2000.0
 *  85- 86  I2    Dec degrees, equinox J2000, epoch 2000.0
 *  87- 88  I2    Dec minutes, equinox J2000, epoch 2000.0
 *  89- 90  I2    Dec seconds, equinox J2000, epoch 2000.0
 * 103-107  F5.2  Visual magnitude
 * 110-114  F5.2  B-V color
 * 149-154  F6.3  Annual proper motion in RA
 * 155-160  F6.3  Annual proper motion in Dec
 *     161  A1    D if dynamic parallax (ignored in this version)
 * 162-166  F5.3  Parallax
 * 167-170  I4    Heliocentric radial velocity
 */
   first_char = '{';
   while (fgets (line, MAX, fin) && !errno)
   {  printf ("%c { ", first_char);

      Transfer_int (line, 1, 4); /* HR */
      Transfer_int (line, 5, 3); /* Flamsteed */
      Transfer_int (line, 11, 1); /* Bayer superscript */
      Transfer_int (line, 26, 6); /* Draper */
      Transfer_int (line, 32, 6); /* SAO */

     /* right ascension */
      s_value[0] = '\0';
      strncat (s_value, line + 75, 8);
      if (sscanf (s_value, "%2d%2d%4lf", &i_unit, &i_min, &f_sec) == 3)
         printf ("%0.5f", i_unit + i_min/60.0 + f_sec/3600);
      else
         printf (NO_DATA);
      printf (", ");

     /* declination */
      s_value[0] = '\0';
      strncat (s_value, line + 84, 6);
      if (sscanf (s_value, "%2d%2d%2d", &i_unit, &i_min, &i_sec) == 3)
         printf
         (  "%0.4f",
            (i_unit + i_min/60.0 + i_sec/3600.0) * ('-' == line[83]? -1: 1)
         );
      else
         printf (NO_DATA);
      printf (", ");

      Transfer_float (line, 103, 5, 2); /* visual magnitude */
      Transfer_float (line, 110, 5, 2); /* B-V */
      Transfer_float (line, 149, 6, 3); /* proper motion RA */
      Transfer_float (line, 155, 6, 3); /* proper motion dec */
      Transfer_float (line, 162, 5, 3); /* parallax */
      Transfer_int (line, 167, 4); /* radial velocity */

      printf ("},\n");
      first_char = ' ';
   }
   if (errno) Die (APP_NAME);
   printf ("}\n\n");

/*===== PASS 3 =====*/
   for (i = 0; i < NSFIELDS; i++)
      printf
      (  "#declare BSC5_%s = %d; // %s\n", sIndices[i][0], i, sIndices[i][1]
      );
   rewind (fin);
   if (!fin) Die (APP_NAME " pass 3: Could not rewind " INPUT_FILE_NAME);
   printf ("#declare BSC5_s_Data = array[BSC5_N][%d]\n", NSFIELDS);
/* String data fields:
 *   8- 10  A3  Bayer Greek letter
 *  12- 14  A3  Constellation abbr.
 *  50- 51  A2  ADS number components
 */
   first_char = '{';
   while (fgets (line, MAX, fin) && !errno)
   { /* Bayer */
      Extract_string (line, s_value, 8, 3);
      printf ("%c { \"%s\", ", first_char, Greek_match (s_value));
     /* constellation abbreviation */
      printf ("\"%s\", ", Extract_string (line, s_value, 12, 3));
     /* multiple star component: */
      printf ("\"%s\" },\n", Extract_string (line, s_value, 50, 2));
      first_char = ' ';
   }
   if (errno) Die (APP_NAME);
   printf ("}\n");

   fclose (fin);

/*===== FOOTER =====*/
   fin = fopen (FOOTER_FILE_NAME, "r");
   if (!fin) Die (APP_NAME ": Could not open " FOOTER_FILE_NAME);
   while ((ch = fgetc (fin)) != EOF && !errno)
      putchar (ch);
   if (errno) Die (APP_NAME);
   fclose (fin);

   exit (0);
}
--->%----->%----->%----->%----->%----->%----->%----->%----->%----->%----->%---


bsc5-header.txt

---%<-----%<-----%<-----%<-----%<-----%<-----%<-----%<-----%<-----%<-----%<---
1.2
/* brightstar5_data.inc version %s
 * Persistence of Vision Raytracer include file
 * POV-Ray Object Collection
 *
 * Selected data fields extracted from Hoffleit, Dorrit and Wayne H. Warren Jr.,
 * The Bright Star Catalogue, preliminary 5th ed.
 * Extracted: %s.
 * Source: ftp://cdsarc.u-strasbg.fr/cats/V/50/
 * Mirror: http://tdc-www.harvard.edu/catalogs/bsc5.html
 *
 * Copyright 2017 - %s Richard Callwood III.  Some rights reserved.
 * This file is licensed under the terms of the GNU-LGPL.
 *
 * This library is free software: you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as published
 * by the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  Please
 * visit https://www.gnu.org/licenses/lgpl-3.0.html for the text
 * of the GNU Lesser General Public License version 3.
 *
 * Vers.  Date         Comments
 * -----  ----         --------
 *        2012-Jan/Feb A tool (not published) is created to extract data from
 *                     the BSC4 and convert it to SDL.
 *        2015-Nov-16  Conversion of the tool from BSC4 to BSC5 is begun.
 *        2015-Nov-19  Separate arrays are used for string and numeric data.
 *        2015-Nov-29  Conversion of the extraction tool is complete.
 *        2017-Jan-03  Greek letter names are changed to initial caps.
 * 1.0    2017-Feb-04  Uploaded.
 * 1.1    2017-Dec-07  The BrightStar5 version is updated.
 * 1.1.1  2019-Mar-25  View_POV_Include_Stack is utilized.
 * 1.1.2  2021-Aug-16  The #version is preserved between 3.5 and 3.8.
 * 1.2    2025-Oct-05  The license is upgraded to LGPL 3.
 *
 * Implementation note: due to POV-Ray namespace scope leakage, local variables
 * and function parameters (other than x, y, and z) *must* be prefixed.
 */
#ifndef (BrightStar5_Data_Inc_Temp)
#declare BrightStar5_Data_Inc_Temp = version;
#version max (3.5, min (3.8, version));
#ifdef (View_POV_Include_Stack)
  #debug "#include \"brightstar5_data.inc\" //version %s\n"
#end
#declare BRIGHTSTAR5__DATA_VERSION = %s;

--->%----->%----->%----->%----->%----->%----->%----->%----->%----->%----->%---


bsc5-footer.txt

---%<-----%<-----%<-----%<-----%<-----%<-----%<-----%<-----%<-----%<-----%<---

#declare BSC5_NO_DATA = BSC5; // a more meaningful name
#declare BSC5_COLOURBV = BSC5_COLORBV;

#version BrightStar5_Data_Inc_Temp;
#end
// end of brightstar5_data.inc
--->%----->%----->%----->%----->%----->%----->%----->%----->%----->%----->%---


make_bsc5_index.pov

---%<-----%<-----%<-----%<-----%<-----%<-----%<-----%<-----%<-----%<-----%<---
/* make_bsc5_index.pov
 * Persistence of Vision Raytracer scene description file
 *
 * Creates creates indexes on the BSC5 data set.
 *
 * Although this scene file is part of the BrightStar5 development suite, it is
 * NOT part of the Object Collection proper.  This file should NOT be stored in
 * your Object Collection folder.  See brightstar5_prep.txt for usage.
 *
 * Copyright Â© 2017 - 2024 Richard Callwood III.  Some rights reserved.
 *
 * This library is free software: you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as published
 * by the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  Please
 * visit https://www.gnu.org/licenses/lgpl-3.0.html for the text
 * of the GNU Lesser General Public License version 3.
 *
 * 2017-Oct-16  The Bayer index is created.
 * 2017-Oct-20  The Henry Draper index is created.
 * 2017-Oct-21  The Flamsteed and SAO indexes are created.
 * 2017-Oct-26  Index array names use double underscores.
 * 2017-Oct-27  A note is added warning the end user against referencing the
 *              indexes.
 * 2018-Oct-12  The LGPL URL protocol is changed to HTTPS.
 * 2019-Mar-25  The generated file utilizes View_POV_Include_Stack.
 * 2019-Mar-25  Version output accommodates minor (3-part) update version
 *              numbers as well as major and interim (2-part) update version
 *              numbers, and the version number is updated to 1.11.
 * 2021-Jun-03  Extended LGPL license and warranty notes are added.
 * 2021-Jul-21  The version number is read from the data include file.
 * 2021-Jul-21  The version string and much of the header (including the text
 *              of 2021-Jun-03) are moved to an external text file.
 * 2024-Dec-14  The LGPL license is added to this scene file, and dependence on
 *              a private include file is removed.
 */
// -F
#version 3.7;

#include "arrays.inc"
#include "brightstar5_data.inc"
global_settings { assumed_gamma 1 }
sphere { z, 0.1 pigment { rgb 1 } } // Avoid the warning about no objects.

#fopen Fhdr "make_bsc5_index.txt" read
#read (Fhdr, s_Version)

#declare Headings = array[9]
{ concat ("/* brightstar5_index.inc version ", s_Version),
  " * Persistence of Vision Raytracer include file",
  " * POV-Ray Object Collection",
  " *",
  " * Indexes on the Yale Bright Star Catalogue.",
  concat (" * Generated: ", datetime (now, "%Y-%b-%d")),
  " * Note:  These indexes are zero-based, unlike the HR numbers.",
  " *",
  concat
  ( " * Copyright 2017 - ", datetime (now, "%Y"),
    " Richard Callwood III.  Some rights reserved."
  ),
}

#declare Intros = array[8]
{ concat
  ( "#declare BRIGHTSTAR5__INDEX_VERSION = ",
    str (BRIGHTSTAR5__DATA_VERSION, 0, 2), ";"
  ),
  "#ifdef (View_POV_Include_Stack)"
  concat
  ( "  #debug \"#include \\\"brightstar5_index.inc\\\" //version ",
    s_Version, "\\n\""
  ),
  "#end"
  "",
  concat
  ( "//==================== INTERNAL (PRIVATE) DATA STRUCTURES ",
    "======================"
  ),
  "// These indexes are not intended for direct use by the end user.",
  "",
}

#declare Footers = array[4]
{ "",
  "#version BrightStar5_Index_Inc_Temp;",
  "#end",
  "// end of brightstar5_index.inc",
}

#macro Dump_text (Text)
  #for (I, 0, dimension_size (Text, 1) - 1)
    #write (Fix, Text[I], "\n")
  #end
#end

#macro Dump_index (Index, N, s_ID)
  #write (Fix, "#declare ", s_ID, " = array[", str (N, 0, 0), "]\n{")
  #for (I, 0, N - 1)
    #write (Fix, " ", str (Index[I], 0, 0), ",")
    #if (I = N - 1)
      #write (Fix, "\n}\n")
    #elseif (mod (I, 10) = 9)
      #write (Fix, "\n ")
    #end
  #end
#end

// strcmp (S1, S2): positive if S1 > S2
#macro Compare_Bayer (Aix, Bix)
  #local Cmp =
    strcmp (BSC5_s_Data [Aix] [BSC5_CONST], BSC5_s_Data [Bix] [BSC5_CONST]);
  #if (!Cmp)
    #local Cmp =
      strcmp (BSC5_s_Data [Aix] [BSC5_BAYER], BSC5_s_Data [Bix] [BSC5_BAYER]);
    #if (!Cmp)
      #local Cmp = BSC5_Data [Aix] [BSC5_SUPER] - BSC5_Data [Bix] [BSC5_SUPER];
      #if (!Cmp)
        #local Cmp =
          strcmp (BSC5_s_Data [Aix] [BSC5_COMP], BSC5_s_Data [Bix] [BSC5_COMP]);
      #end
    #end
  #end
  Cmp
#end

// strcmp (S1, S2): positive if S1 > S2
#macro Compare_Flamsteed (Aix, Bix)
  #local Cmp =
    strcmp (BSC5_s_Data [Aix] [BSC5_CONST], BSC5_s_Data [Bix] [BSC5_CONST]);
  #if (!Cmp)
    #local Cmp =
      BSC5_Data [Aix] [BSC5_FLAMSTEED] - BSC5_Data [Bix] [BSC5_FLAMSTEED];
    #if (!Cmp)
      #local Cmp =
        strcmp (BSC5_s_Data [Aix] [BSC5_COMP], BSC5_s_Data [Bix] [BSC5_COMP]);
    #end
  #end
  Cmp
#end

// strcmp (S1, S2): positive if S1 > S2
#macro Compare_SAO (Aix, Bix)
  #local Cmp = BSC5_Data [Aix] [BSC5_SAO] - BSC5_Data [Bix] [BSC5_SAO];
  #if (!Cmp)
    #local Cmp =
      strcmp (BSC5_s_Data [Aix] [BSC5_COMP], BSC5_s_Data [Bix] [BSC5_COMP]);
  #end
  Cmp
#end

//===============================================================

#fopen Fix "brightstar5_index.inc" write

Dump_text (Headings)
#while (defined (Fhdr))
  #read (Fhdr, s_Line)
  #if (defined (Fhdr)) #write (Fix, s_Line, "\n") #end
#end
Dump_text (Intros)

#declare Index = array [BSC5_N]

// Bayer
#debug "Creating Bayer index...\n"
#declare Count = 0;
#for (I, 0, BSC5_N - 1)
  #if (BSC5_s_Data [I] [BSC5_BAYER] != "")
    #declare Index[Count] = I;
    #declare Count = Count + 1;
  #end
#end
#macro Sort_Compare (Array, IdxA, IdxB)
  (Compare_Bayer (Array [IdxA], Array [IdxB]) < 0)
#end
Sort_Partial_Array (Index, 0, Count - 1)
#write
( Fix, "// Sort order: constellation, Bayer letter, superscript, component\n"
)
Dump_index (Index, Count, "BSC5__Bayer_ix")

// Draper
#debug "Creating Henry Draper index...\n"
#declare Count = 0;
#for (I, 0, BSC5_N - 1)
  #if (BSC5_Data [I] [BSC5_HD] != BSC5_NO_DATA)
    #declare Index[Count] = I;
    #declare Count = Count + 1;
  #end
#end
#macro Sort_Compare (Array, IdxA, IdxB)
  (BSC5_Data [Array [IdxA]] [BSC5_HD] < BSC5_Data [Array [IdxB]] [BSC5_HD])
#end
Sort_Partial_Array (Index, 0, Count - 1)
Dump_index (Index, Count, "BSC5__Draper_ix")

// Flamsteed
#debug "Creating Flamsteed index...\n"
#declare Count = 0;
#for (I, 0, BSC5_N - 1)
  #if (BSC5_Data [I] [BSC5_FLAMSTEED] != BSC5_NO_DATA)
    #declare Index[Count] = I;
    #declare Count = Count + 1;
  #end
#end
#macro Sort_Compare (Array, IdxA, IdxB)
  (Compare_Flamsteed (Array [IdxA], Array [IdxB]) < 0)
#end
Sort_Partial_Array (Index, 0, Count - 1)
#write (Fix, "// Sort order: constellation, Flamsteed number, component\n")
Dump_index (Index, Count, "BSC5__Flamsteed_ix")

// SAO
#debug "Creating SAO index...\n"
#declare Count = 0;
#for (I, 0, BSC5_N - 1)
  #if (BSC5_Data [I] [BSC5_SAO] != BSC5_NO_DATA)
    #declare Index[Count] = I;
    #declare Count = Count + 1;
  #end
#end
#macro Sort_Compare (Array, IdxA, IdxB)
  (Compare_SAO (Array [IdxA], Array [IdxB]) < 0)
#end
Sort_Partial_Array (Index, 0, Count - 1)
#write (Fix, "// Sort order: SAO number, component\n")
Dump_index (Index, Count, "BSC5__SAO_ix")

Dump_text (Footers)

#fclose Fix
--->%----->%----->%----->%----->%----->%----->%----->%----->%----->%----->%---


make_bsc5_index.txt

---%<-----%<-----%<-----%<-----%<-----%<-----%<-----%<-----%<-----%<-----%<---
"1.2",
" * This file is licensed under the terms of the GNU-LGPL.",
" *",
" * This library is free software: you can redistribute it and/or modify it",
" * under the terms of the GNU Lesser General Public License as published",
" * by the Free Software Foundation, either version 3 of the License, or",
" * (at your option) any later version.",
" *",
" * This library is distributed in the hope that it will be useful,",
" * but WITHOUT ANY WARRANTY; without even the implied warranty of",
" * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  Please",
" * visit https://www.gnu.org/licenses/lgpl-3.0.html for the text",
" * of the GNU Lesser General Public License version 3.",
" *",
" * Vers.  Date         Comments",
" * -----  ----         --------",
" *        2017-Oct-16  Data analysis is begun.",
" * 1.1    2017-Dec-07  Uploaded.",
" * 1.1.1  2019-Mar-25  View_POV_Include_Stack is utilized.",
" * 1.1.2  2021-Aug-16  The #version is preserved between 3.5 and 3.8.",
" * 1.2    2025-Oct-05  The license is upgraded to LGPL 3.",
" *",
" * Implementation note: due to POV-Ray namespace scope leakage, local variables",
" * and function parameters (other than x, y, and z) *must* be prefixed.",
" */",
"#ifndef (BrightStar5_Index_Inc_Temp)",
"#declare BrightStar5_Index_Inc_Temp = version;",
"#version max (3.5, min (3.8, version));",
--->%----->%----->%----->%----->%----->%----->%----->%----->%----->%----->%---


                              ONE-TIME PROCEDURE
                              ------------------

Download the BSC5 source data file to your development staging folder, and
name it bsc5.dat.  The links to the servers are in the acknowledgments section
of the user manual brightstar5.html.

This step needs to be done only once.


                             OCCASIONAL PROCEDURE
                             --------------------

Compile the data extraction utility into an executable program.  You will need
to consult your C compiler documentation for how to do this.  With GCC (for
example), this is done using the command:

  gcc -o bsc5-extract -lm bsc5-extract.c

There is no GUI for this utility, so it should be portable across platforms.

This step would need to be re-done whenever bsc5-extract.c is changed.  This
would be the case if there is a change in the selection of which fields are
extracted from the BSC5 source data file.  Do not change the license notice
(other than, at your option, to upgrade the LGPL version).


                            HOW TO USE THESE FILES
                            ----------------------

1. Edit bsc5-header.txt.  Update the version number on the first
   line, and add any appropriate comments to the comment header.  The version
   should start in "semantic" form (numbers and decimal points only), but may
   be followed by any character.  Note that Object Collection restrictions
   limit such extra characters to 'a', 'b', and 'c'.  Do not disturb the %s
   character sequences, and do not change the license notice (other than, at
   your option, to upgrade the LGPL version).

2. Edit make_bsc5_index.txt.  Update the version number string on the first
   line, and add any appropriate comment strings to the comment header
   section.  Do not change the license notice (other than, at your option, to
   upgrade the LGPL version).

3. Execute the extraction utility bsc5-extract from the command console,
   redirecting the standard output to brightstar5_data.inc.  From the Windows
   command prompt, this would be something like:

     start bsc5-extract.exe > brightstar5_data.inc

   In Unix or GNU/Linux:

     ./bsc5-extract > brightstar5_data.inc

4. Render make_bsc5_index.pov with -F on the command line.  This creates the
   file brightstar5_index.inc.  The process will take a few minutes.

5. Make sure the version identifiers in the 3 include files are declared with
   the same value:

     BRIGHTSTAR5__DATA_VERSION in brightstar5_data.inc (newly generated)
     BRIGHTSTAR5__INDEX_VERSION in brightstar5_index.inc (newly generated)
     BRIGHTSTAR5_VERSION in brightstar5.inc (in your Object Collection folder)

   The values declared in brightstar5_data.inc and brightstar5_index.inc are
   derived from the first line of bsc5-header.txt.

6. In accordance with the GNU-LGPL, you MUST include your name and the date you
   made your changes in any file that you modify.

7. You may now copy the newly generated files brightstar5_data.inc and
   brightstar5_index.inc from the development staging folder to your Object
   Collection folder.
